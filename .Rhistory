sumCoef[1,1] + c(-1,1) * qt(0.95,df = fit$df) * sumCoef[1,2]
sumCoef
sumCoef <- summary(fit)$coeffiecients
summary(fit)$coeffiecients
summary(fit)$coefficients
sumCoef<-summary(fit)$coefficients
sumCoef[2,1] + c(-1,1) * qt(0.95,df = fit$df) * sumCoef[2,2]
sumCoef[1,1] + c(-1,1) * qt(0.95,df = fit$df) * sumCoef[1,2]
sumCoef[2,1] + c(-1,1) * qt(0.975,df = fit$df) * sumCoef[2,2]
sumCoef
coef(fit)[1]
coef(fit)[1] + coef(fit)[2]* 3000
(coef(fit)[1] + coef(fit)[2]* 3000) + c(-1,1) * qt(0.975,df = fit$df) * sumCoef[2,2]
(coef(fit)[1] + coef(fit)[2]* 3) + c(-1,1) * qt(0.975,df = fit$df) * sumCoef[2,2]
(coef(fit)[1] + coef(fit)[2]* 3) + c(-1,1) * qt(0.95,df = fit$df) * sumCoef[2,2]
fit <- lm(mpg~wt, data = mtcars)
fit
sumCoef <- summary(fit)$coefficients
sumCoef
sumCoef[2,1] + c(-1,1) * qt(0.975,df = fit$df) * sumCoef[2,2]
sumCoef[2,1] + c(-1,1) * qt(0.95,df = fit$df) * sumCoef[2,2]
sumCoef[1,1] + c(-1,1) * qt(0.95,df = fit$df) * sumCoef[1,2]
sumCoef[1,1] + c(-1,1) * qt(0.975,df = fit$df) * sumCoef[1,2]
fit
(coef(fit)[1]+coef(fit)[2] * 3 ) + c(-1,1) * qt(0.975,df = fit$df) * sumCoef[1,2]
(coef(fit)[1]+coef(fit)[2] * 3 ) + c(-1,1) * qt(0.975,df = fit$df) * sumCoef[2,2]
swirl()
library(swirl)
swirl()
swirl()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
version
exit()
q()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages('Miktex')
install.packages('Miktex')
install.packages('Miktex')
install.packages('pdflatex')
install.packages('pandoc')
bye()
q()
library(dplyr)
library(ggplot2)
names(ToothGrowth)
gd <- ToothGrowth  %>% select(len,dose)  %>% group_by(dose) %>% summarize_each(funs(mean))
gdMean <- ToothGrowth  %>% select(len,dose)  %>% group_by(dose) %>% summarize_each(funs(mean))
gdVar <- ToothGrowth  %>% select(len,dose)  %>% group_by(dose) %>% summarize_each(funs(var))
gdMean
gdVar
qplot(ToothGrowth$len, colors = ToothGrowth$dose)
qplot(ToothGrowth$supp,ToothGrowth$len, colors = ToothGrowth$dose)
qplot(ToothGrowth$dose,ToothGrowth$len, colors = ToothGrowth$dose)
qplot(ToothGrowth$dose,ToothGrowth$len, color = ToothGrowth$dose)
qplot(ToothGrowth$dose,ToothGrowth$len, color = as.factor(ToothGrowth$dose))
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point()
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point() + geom_abline(x = 2)
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point() + geom_abline(x = 1.5)
??geom_abline
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point() + geom_abline(intercept = 2)
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point() + geom_abline(intercept = 10)
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point() + geom_abline(intercept = 10, slope = 0)
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point() + geom_abline(intercept = 10, slope = 0, color = 'red')
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point() + geom_abline(intercept = c(10,20), slope = 0, color = 'red')
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point() + geom_abline(intercept = c(10,20), slope = c(0,2), color = 'red')
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point() + geom_abline(intercept = c(10,20), slope = c(0,0), color = 'red')
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point() + geom_abline(intercept = c(10,20), slope = c(1,0), color = 'red')
ggplot(data = ToothGrowth, aes(x = dose,y = len)) + geom_point() + geom_abline(intercept = c(10,20), slope = c(1,1), color = 'red')
gdMean <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(mean))
gdVar <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(var))
std([1:3])
std(c(1:3)
)
sd(c(1:5))
gdMean + c(-1,1)
gdMean
gdMean[,2]
gdMean[,2] + c(-1,1)
c (-1,1) * qnorm(0.975) * gdSd[,2]
c (-1,1) * qnorm(0.975) * gdSd[,2]
gdSd <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(sd))
c (-1,1) * qnorm(0.975) * gdSd[,2]
rep(gdSd[,2],1)
rep(gdSd[,2],1,2)
a <- rep(gdSd[,2],1,2)
dim(a)
str(a)
matrix(rep(gdSd[,2],2),2)
a <- matrix(rep(gdSd[,2],2),2)
a
gdSd[,c(2,2)]
c(-1,1)[1,1]
c(-1,1)[1,1,1]
c(-1,1)[2]
c(-1,1)[1]
c(-1,1)[c(1,2,1,2,1,2)]
rep(c(-1,1),3)
matrix(rep(c(-1,1),3),2)
matrix(rep(c(-1,1),3),nrow = 3)
matrix(rep(c(-1,1),3),nrow = 3) * qnorm(0.975) * gdSd[,c(2,2)]
gdlen <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(length))
gdlen
gdlen[,c(2,2)]
matrix(rep(c(-1,1),3),nrow = 3) * qnorm(0.975) * gdSd[,c(2,2)]/gdlen[,c(2,2)]
gdMean[,c(2,2)] matrix(rep(c(-1,1),3),nrow = 3) * qnorm(0.975) * gdSd[,c(2,2)]/gdlen[,c(2,2)]
gdMean[,c(2,2)] + matrix(rep(c(-1,1),3),nrow = 3) * qnorm(0.975) * gdSd[,c(2,2)]/gdlen[,c(2,2)]
matrix(rep(c(-1,1),3),nrow = 3)
matrix(rep(c(-1,1),each = 3),nrow = 3)
gdMean <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(mean))
gdSd <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(sd))
gdlen <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(length))
gdMean[,c(2,2)] + matrix(rep(c(-1,1),each = 3),nrow = 3) * qnorm(0.975) * gdSd[,c(2,2)]/gdlen[,c(2,2)]
rng95 <- gdMean[,c(2,2)] + matrix(rep(c(-1,1),each = 3),nrow = 3) * qnorm(0.975) * gdSd[,c(2,2)]/gdlen[,c(2,2)]
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + abline(slot = 0 , intercept = rng[1,1]) + abline(slot = 0 , intercept = rng[1,2])
g1
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + abline(slot = 0 , intercept = rng95[1,1]) + abline(slot = 0 , intercept = rng95[1,2])
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + abline(slot = 0 , intercept = rng95[1,1]) + abline(slot = 0 , intercept = rng95[1,2])
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1
g1 <- g1 + abline(slot = 0 , intercept = rng95[1,1]) + abline(slot = 0 , intercept = rng95[1,2])
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slot = 0 , intercept = rng95[1,1]) + geom_abline(slot = 0 , intercept = rng95[1,2])
g1
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[1,1]) + geom_abline(slope = 0 , intercept = rng95[1,2])
g1
hist(ToothGrowth$len[ToothGrowth$dose == 0.5,])
hist(ToothGrowth$len[ToothGrowth$dose == 0.5])
hist(ToothGrowth$len[ToothGrowth$dose == 0.5],20)
hist(ToothGrowth$len[ToothGrowth$dose == 0.5],10)
hist(ToothGrowth$len[ToothGrowth$dose == 1.5],10)
hist(ToothGrowth$len[ToothGrowth$dose == 1],10)
hist(ToothGrowth$len[ToothGrowth$dose == 2],10)
hist(ToothGrowth$len[ToothGrowth$dose == 1],10)
rng95 <- gdMean[,c(2,2)] + matrix(rep(c(-1,1),each = 3),nrow = 3) * qunif(0.975) * gdSd[,c(2,2)]/gdlen[,c(2,2)]
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[1,1]) + geom_abline(slope = 0 , intercept = rng95[1,2])
g1
rng95 <- gdMean[,c(2,2)] + matrix(rep(c(-1,1),each = 3),nrow = 3) * qunif(0.975) * gdSd[,c(2,2)]/gdlen[,c(2,2)]
rng95 <- gdMean[,c(2,2)] + matrix(rep(c(-1,1),each = 3),nrow = 3) * qunif(0.975) * gdSd[,c(2,2)]/gdlen[,c(2,2)]
??ToothGrowth
gdMean <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(mean))
gdSd <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(sd))
gdlen <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(length))
gdMin <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(min))
gdMax <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(max))
rng95 <- gdMean[,c(2,2)] + matrix(rep(c(-1,1),each = 3),nrow = 3) * qnorm(0.975) * gdSd[,c(2,2)]/sqrt(gdlen[,c(2,2)])
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[1,1]) + geom_abline(slope = 0 , intercept = rng95[1,2])
g1
gdMean <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(mean))
gdSd <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(sd))
gdlen <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(length))
gdMin <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(min))
gdMax <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(max))
rng95 <- gdMean[,c(2,2)] + matrix(rep(c(-1,1),each = 3),nrow = 3) * qunif(0.975) * gdSd[,c(2,2)]/sqrt(gdlen[,c(2,2)])
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[1,1]) + geom_abline(slope = 0 , intercept = rng95[1,2])
g1
qunif(p = 0.975,min = gdMin[1,2], max = gdMax[1,2])
gdMax[1,2]
a <- gdMax[1,2]
str(a)
str(as.numerica)
str(as.numeric(a))
as.matrix(gdMin)
as.matrix(gdMin[,2])
as.vector(gdMin)
as.vector(gdMin[,2])
gdMin <- as.vector(ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(min))[,2])
gdMax <- as.vector(ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(max))[,2])
gdMax <- as.vector((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(max)))[,2])
gdMin <- as.vector((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(min))[,2])
gdMax <- as.vector((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(max)))[,2])
gdMin <- as.vector((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(min)))[,2])
gdMin
qunif(p = 0.975,min = gdMin[1], max = gdMax[1])
qunif(p = 0.975,min =2, max = 3)
a <- gMin[1]
a <- gMin[1]
a <- gdMin[1]
str(a)
qunif(p = 0.975,min = as.numeric(gdMin[1]), max = as.numeric(gdMax[1]))
gdMin <- as.matrix((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(min)))[,2])
gdMax <- as.matrix((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(max)))[,2])
a <- gdMin[1,1]
str(a)
qunif(p = 0.975,min =gMin[1])
qunif(p = 0.975,min =gdMin[1])
qunif(p = 0.975,min =gdMin[1], max = gdMax[1])
qunif(p = 0.975,min =gdMin, max = gdMax)
a <- qunif(p = 0.975,min =gdMin[1], max = gdMax[1])
str(a)
a <- qunif(p = 0.975,min =gdMin, max = gdMax)
str(a)
a <- qunif(p = 0.975,min =gdMin, max = gdMax)[,c(1,1)]
qunif(p = 0.975,min =gdMin, max = gdMax)[,c(1,1)]
gdMean <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(mean))
gdSd <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(sd))
gdlen <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(length))
gdMin <- as.matrix((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(min)))[,2])
gdMax <- as.matrix((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(max)))[,2])
rng95 <- gdMean[,c(2,2)] + matrix(rep(c(-1,1),each = 3),nrow = 3) * qunif(p = 0.975,min =gdMin, max = gdMax)[,c(1,1)] * gdSd[,c(2,2)]/sqrt(gdlen[,c(2,2)])
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[1,1]) + geom_abline(slope = 0 , intercept = rng95[1,2])
g1
qunif(p = 0.975,min =gdMin, max = gdMax)[,c(1,1)]
gdMin
gMax
gdMax
rng95
gdMean <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(mean))
gdSd <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(sd))
gdlen <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(length))
gdMin <- as.matrix((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(min)))[,2])
gdMax <- as.matrix((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(max)))[,2])
rng95 <- gdMean[,c(2,2)] + matrix(rep(c(-1,1),each = 3),nrow = 3) * qnorm(p = 0.975) * gdSd[,c(2,2)]/sqrt(gdlen[,c(2,2)])
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[1,1]) + geom_abline(slope = 0 , intercept = rng95[1,2])
g1
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[1,1]) + geom_abline(slope = 0 , intercept = rng95[1,2])
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[2,1]) + geom_abline(slope = 0 , intercept = rng95[2,2])
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[3,1]) + geom_abline(slope = 0 , intercept = rng95[3,2])
g1
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[1,1]) + geom_abline(slope = 0 , intercept = rng95[1,2], fill = 'red')
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[2,1]) + geom_abline(slope = 0 , intercept = rng95[2,2])
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[3,1]) + geom_abline(slope = 0 , intercept = rng95[3,2])
g1
??geom_abline
str(rng95)
rng95
names(rng95) <- c('l','u')
rng95
gdMean <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(mean))
gdSd <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(sd))
gdlen <- ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(length))
gdMin <- as.matrix((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(min)))[,2])
gdMax <- as.matrix((ToothGrowth %>% select(len,dose) %>% group_by(dose) %>% summarize_each(funs(max)))[,2])
rng95 <- gdMean[,c(2,2)] + matrix(rep(c(-1,1),each = 3),nrow = 3) * qnorm(p = 0.975) * gdSd[,c(2,2)]/sqrt(gdlen[,c(2,2)])
names(rng95) <- c('l','u')
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[1,1]) + geom_abline(slope = 0 , intercept = rng95[1,2], fill = 'red')
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[2,1]) + geom_abline(slope = 0 , intercept = rng95[2,2])
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[3,1]) + geom_abline(slope = 0 , intercept = rng95[3,2])
g1
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[1,1]) + geom_abline(slope = 0 , intercept = rng95[1,2], colour = 'red')
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[2,1]) + geom_abline(slope = 0 , intercept = rng95[2,2])
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[3,1]) + geom_abline(slope = 0 , intercept = rng95[3,2])
g1
g1 <- ggplot(data = ToothGrowth, aes(x = dose, y = len))  + geom_point()
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[1,1], colour = 'red') + geom_abline(slope = 0 , intercept = rng95[1,2], colour = 'red')
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[2,1],colour = 'blue') + geom_abline(slope = 0 , intercept = rng95[2,2], colour = 'blue')
g1 <- g1 + geom_abline(slope = 0 , intercept = rng95[3,1],colour = 'green') + geom_abline(slope = 0 , intercept = rng95[3,2],colour = 'green')
g1
names(ToothGrowth)
ggplot(data = ToothGrowth, aes(x = dose, y = len)) + geom_smooth(aes(group = supp))
ggplot(data = ToothGrowth, aes(x = dose, y = len)) + geom_smooth(aes(group = supp)) + geom_point()
ggplot(data = ToothGrowth, aes(x = dose, y = len)) + geom_smooth(aes(group = supp)) + geom_point(aes(colour = supp))
gdMean <- ToothGrowth %>% group_by(dose,supp) %>% summarize_each(mean)
gdMean <- ToothGrowth %>% group_by(dose,supp) %>% summarize_each(mean)
gdMaen
gdMean
rm(list = ls())
data("ToothGrowth")
library(dplyr)
gdMean <- ToothGrowth %>% group_by(dose,supp) %>% summarize_each(mean)
gdMean <- ToothGrowth %>% group_by(dose,factor(supp) %>% summarize_each(mean)
)
gdMean <- ToothGrowth %>% group_by(dose,factor(supp)) %>% summarize_each(mean)
gdMean <- ToothGrowth %>% group_by(dose,factor(supp))
ToothGrowth %>% group_by(dose,factor(supp))
ToothGrowth %>% group_by(dose,unclass(supp))
ToothGrowth %>% group_by(dose,unclass(supp))  %>% summarize_each(funs(mean))
ToothGrowth %>% group_by(dose,supp)  %>% summarize_each(funs(mean))
gdMean <- ToothGrowth %>% group_by(dose,supp) %>% summarize_each(funs(mean))
gdSd <- ToothGrowth %>% group_by(dose,supp) %>% summarize_each(funs(sd))
gdCnt <- ToothGrowth %>% group_by(dose,supp) %>% summarize_each(funs(length))
gdCnt
as.matrix(gdCnt)
as.matrix(gdCnt[,c(1,3)])
as.matrix(gdMean[,c(1,3)])
gd <- gdMean[,c(1,2)]
gd
gdMean <- ToothGrowth %>% group_by(dose,supp) %>% summarize_each(funs(mean))
gdSd <- ToothGrowth %>% group_by(dose,supp) %>% summarize_each(funs(sd))
gdCnt <- ToothGrowth %>% group_by(dose,supp) %>% summarize_each(funs(length))
gd <- gdMean[,c(1,2)]
gddMeanMat <- as.matrix(gdMean[,c(3,3)])
gddSdMat <- as.matrix(gdSd[,c(3,3)])
gddCntMat <- as.matrix(gdCnt[,c(3,3)])
matrix(rep(c(-1,1),each = 6),ncol = 2
)
rng95 <- gdMeanMat + matrix(rep(c(-1,1),each = 6),ncol = 2) * qnorm(p = 0.975) * gdSdMat/sqrt(gdCntMat)
gdMeanMat <- as.matrix(gdMean[,c(3,3)])
rng95 <- gdMeanMat + matrix(rep(c(-1,1),each = 6),ncol = 2) * qnorm(p = 0.975) * gdSdMat/sqrt(gdCntMat)
gdMeanMat <- as.matrix(gdMean[,c(3,3)])
gdSdMat <- as.matrix(gdSd[,c(3,3)])
gdCntMat <- as.matrix(gdCnt[,c(3,3)])
rng95 <- gdMeanMat + matrix(rep(c(-1,1),each = 6),ncol = 2) * qnorm(p = 0.975) * gdSdMat/sqrt(gdCntMat)
rng95
names(rng95) <- c('l','u')
rng95
names(rng95) <- data.frame(rng95, col.names = c('l','u'))
rng95 <- gdMeanMat + matrix(rep(c(-1,1),each = 6),ncol = 2) * qnorm(p = 0.975) * gdSdMat/sqrt(gdCntMat)
rng95 <- data.frame(rng95, col.names = c('l','u'))
rng95
rng95 <- gdMeanMat + matrix(rep(c(-1,1),each = 6),ncol = 2) * qnorm(p = 0.975) * gdSdMat/sqrt(gdCntMat)
rng95 <- data.frame(l = rng95[,1], u = rng95[,2])
rng95
rng95 <- gdMeanMat + matrix(rep(c(-1,1),each = 6),ncol = 2) * qnorm(p = 0.975) * gdSdMat/sqrt(gdCntMat)
rng95 <- data.frame(lowerBound = rng95[,1], upperBound = rng95[,2])
rng95
rng95 <- gdMeanMat + matrix(rep(c(-1,1),each = 6),ncol = 2) * qnorm(p = 0.975) * gdSdMat/sqrt(gdCntMat)
rng95 <- data.frame(group = gd,lowerBound = rng95[,1], upperBound = rng95[,2])
rng95
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBoun, min = lowerBound))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp))
gdMean
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(gdMean, aes(x = dose, y = len))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(data = gdMean, aes(x = dose, y = len))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(gdMean, aes(x = dose, y = len, colour = supp))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(gdMean, aes(x = dose, y = len, colour = supp))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(gdMean, aes(x = dose, y = len))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(data = gdMean, aes(x = dose, y = len))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(data = gdMean, aes(x = dose, y = len,colour = supp))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(data = gdMean, aes(x = dose, y = len,colour = supp, size = 5))
gdMean
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(data = gdMean, aes(x = dose, y = len,colour = supp, size = 5))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(data = gdMean, aes(x = dose, y = len,colour = supp))
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(data = gdMean, aes(x = dose, y = len,colour = supp), size = 5)
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(data = gdMean, aes(x = dose, y = len,colour = supp), size = 2)
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(data = gdMean, aes(x = dose, y = len,colour = supp), size = 3)
ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp)) + geom_point(data = gdMean, aes(x = dose, y = len,colour = supp), size = 5)
g <- ggplot(rng95, aes(x = group.dose)) + geom_errorbar(aes(max = upperBound, min = lowerBound, colour = group.supp))
g <- g + geom_point(data = gdMean, aes(x = dose, y = len,colour = supp), size = 5)
g
setwd('D:/ProjectsFolder/predmachlearn/')
library(ggplot2)
library(dplyr)
library(caret)
set.seed(223)
# Load Train and Test Data
X <- read.csv('pml-training.csv')
# Get Part of Data ! I have not enough RAM !
subsetInd <- createDataPartition(X[,dim(X)[2]],p = 0.01, list = FALSE)
X <- X[subsetInd,]
XTest <- read.csv('pml-testing.csv')
YTest <- XTest[,dim(XTest)[2]]
n <- dim(XTest)[2]
# Remove features that are NAN in more than 0.7 of cases
nanCount <- sapply(X, function(x){sum(is.na(x))})
highNanCols <- which(nanCount > 0.7*dim(X)[1])
X <- X[,-highNanCols]
# Impute other missin values
if(sum(is.na(X))> 0){
preComp <- preProcess (X, method = c("knnImpute"), k = 10)
X <- predict (pp, newdata = X)
}
Y <- X[,dim(X)[2]]
X <- X[,-dim(X)[2]]
# Select Features that proveide 0.95 of Variance in dataset using Principal Component Analysis
preProc <- preProcess(X, method = 'pca', thresh = 0.5)
X <- predict(preProc, X)
X <- merge(X,data.frame(classe  = Y))
trCtrl <- trainControl(method = 'cv',number = 2)
t <- system.time(model <- train(classe ~., data = X, trControl = trCtrl,method = 'svmLinear2'))
# predictions <- predict(model,)
predictions  <- predict(model, XTest[,-n])
confusionMatrix(predictions, XTest[,n])
dim(X)
library(ggplot2)
library(dplyr)
library(caret)
set.seed(223)
# Load Train and Test Data
X <- read.csv('pml-training.csv')
# Get Part of Data ! I have not enough RAM !
subsetInd <- createDataPartition(X[,dim(X)[2]],p = 0.01, list = FALSE)
X <- X[subsetInd,]
XTest <- read.csv('pml-testing.csv')
YTest <- XTest[,dim(XTest)[2]]
n <- dim(XTest)[2]
# Remove features that are NAN in more than 0.7 of cases
nanCount <- sapply(X, function(x){sum(is.na(x))})
highNanCols <- which(nanCount > 0.7*dim(X)[1])
X <- X[,-highNanCols]
# Impute other missin values
if(sum(is.na(X))> 0){
preComp <- preProcess (X, method = c("knnImpute"), k = 10)
X <- predict (pp, newdata = X)
}
Y <- X[,dim(X)[2]]
X <- X[,-dim(X)[2]]
# Select Features that proveide 0.95 of Variance in dataset using Principal Component Analysis
preProc <- preProcess(X, method = 'pca', thresh = 0.1)
X <- predict(preProc, X)
dim(X)
library(ggplot2)
library(dplyr)
library(caret)
set.seed(223)
# Load Train and Test Data
X <- read.csv('pml-training.csv')
# Get Part of Data ! I have not enough RAM !
subsetInd <- createDataPartition(X[,dim(X)[2]],p = 0.01, list = FALSE)
X <- X[subsetInd,]
XTest <- read.csv('pml-testing.csv')
YTest <- XTest[,dim(XTest)[2]]
n <- dim(XTest)[2]
# Remove features that are NAN in more than 0.7 of cases
nanCount <- sapply(X, function(x){sum(is.na(x))})
highNanCols <- which(nanCount > 0.7*dim(X)[1])
X <- X[,-highNanCols]
# Impute other missin values
if(sum(is.na(X))> 0){
preComp <- preProcess (X, method = c("knnImpute"), k = 10)
X <- predict (pp, newdata = X)
}
Y <- X[,dim(X)[2]]
X <- X[,-dim(X)[2]]
# Select Features that proveide 0.95 of Variance in dataset using Principal Component Analysis
preProc <- preProcess(X, method = 'pca', thresh = 0.1)
X <- predict(preProc, X)
dim(X)
t
rm(list = ls())
library(ggplot2)
library(dplyr)
library(caret)
set.seed(223)
# Load Train and Test Data
X <- read.csv('pml-training.csv')
# Get Part of Data ! I have not enough RAM !
subsetInd <- createDataPartition(X[,dim(X)[2]],p = 0.01, list = FALSE)
X <- X[subsetInd,]
XTest <- read.csv('pml-testing.csv')
YTest <- XTest[,dim(XTest)[2]]
n <- dim(XTest)[2]
# Remove features that are NAN in more than 0.7 of cases
nanCount <- sapply(X, function(x){sum(is.na(x))})
highNanCols <- which(nanCount > 0.7*dim(X)[1])
X <- X[,-highNanCols]
# Impute other missin values
if(sum(is.na(X))> 0){
preComp <- preProcess (X, method = c("knnImpute"), k = 10)
X <- predict (pp, newdata = X)
}
Y <- X[,dim(X)[2]]
X <- X[,-dim(X)[2]]
# Select Features that proveide 0.95 of Variance in dataset using Principal Component Analysis
preProc <- preProcess(X, method = 'pca', thresh = 0.1)
X <- predict(preProc, X)
X <- merge(X,data.frame(classe  = Y))
trCtrl <- trainControl(method = 'cv',number = 2)
t <- system.time(model <- train(classe ~., data = X, trControl = trCtrl,method = 'knn'))
# predictions <- predict(model,)
predictions  <- predict(model, XTest[,-n])
confusionMatrix(predictions, XTest[,n])
help("memory.size")
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,19,19,19,20)
w <- c(3,3,2,3,3,3,3,3,3,6)
numel(w)
length(w)
length(nomarat)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,115,20)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,15,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,16,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,16.5,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,16.75,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,16.72,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,16.71,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,16.70,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,16.65,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,16.62,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,16.60,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,16.62,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,16.61,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,18,18,18,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,18.5,18.5,18.5,20)
sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,20,20)
sum(w * nomarat) / sum(w)
a1 <- sum(w * nomarat) / sum(w)
nomarat <- c(14.9, 14.5,19.1,18.75,16,18.5,20,20,19,20)
a2 <- sum(w * nomarat) / sum(w)
a1 - a2
install.packages('GGally')
